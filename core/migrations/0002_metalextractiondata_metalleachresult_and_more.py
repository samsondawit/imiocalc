# Generated by Django 4.1 on 2024-04-09 23:32

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Metalextractiondata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_cu_prod', models.FloatField()),
                ('v_prod', models.FloatField()),
                ('c_cu_raf', models.FloatField()),
                ('c_cu_electrolyte_rich', models.FloatField()),
                ('v_electrolyte_rich', models.FloatField()),
                ('v_organic', models.FloatField()),
                ('c_cu_electrolyte_depleted', models.FloatField()),
                ('v_electrolyte_depleted', models.FloatField()),
            ],
            options={
                'db_table': 'MetalExtractionData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metalleachresult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.IntegerField()),
                ('extraction_efficiency', models.FloatField()),
                ('c_cu_organic_depleted', models.FloatField()),
                ('c_cu_organic_rich', models.FloatField()),
                ('re_extraction_efficiency_organic', models.FloatField()),
                ('re_extraction_efficiency_electrolyte', models.FloatField()),
                ('cu_gain', models.FloatField()),
                ('total_accumulated_cu', models.FloatField()),
                ('total_cu_recovery', models.FloatField()),
                ('overall_extraction_efficiency', models.FloatField()),
            ],
            options={
                'db_table': 'MetalLeachResult',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Totalbalanceresult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('in_raf_percent', models.FloatField()),
                ('in_electrolyte_percent', models.FloatField()),
                ('in_katods_percent', models.FloatField()),
                ('in_organics_percent', models.FloatField()),
                ('ore_remain_percent', models.FloatField()),
            ],
            options={
                'db_table': 'TotalBalanceResult',
                'managed': False,
            },
        ),
    ]
